{"ast":null,"code":"var _jsxFileName = \"/Users/donitabella/Desktop/UC BERKELEY/Challenges/React Portfolio/src/components/ContactForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form, Input, Container } from \"semantic-ui-react\";\nimport validator from \"validator\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst checkForUndefined = (name, value) => {\n  if (value === undefined) {\n    setState({ ...state,\n      [name]: {\n        value,\n        error: \"You can't leave blank fields\"\n      }\n    });\n  }\n};\n\nconst validateRequired = (name, value) => {\n  if (!value.toString().trim().length) {\n    return {\n      content: `Please enter a ${name}`\n    };\n  }\n};\n\nconst validateEmail = value => {\n  const valido = validator.isEmail(value);\n\n  if (!valido) {\n    return {\n      content: `Please enter a valid email`\n    };\n  }\n};\n\nconst validateLength = value => {\n  if (value.toString().trim().length < 12) {\n    return {\n      content: \"Please enter a message of at least 12 characters\"\n    };\n  }\n};\n\nconst ContactForm = () => {\n  _s();\n\n  var _state$name2, _state$email2, _state$message;\n\n  const [state, setState] = useState({});\n\n  const handleChange = (e, {\n    name,\n    value\n  }) => {\n    var error;\n\n    if (name === \"email\") {\n      error = validateEmail(value);\n      setState({ ...state,\n        [name]: {\n          value,\n          error\n        }\n      });\n    }\n\n    if (name === \"message\") {\n      error = validateLength(value);\n      setState({ ...state,\n        [name]: {\n          value,\n          error\n        }\n      });\n    }\n\n    error = validateRequired(name, value);\n\n    if (error) {\n      setState({ ...state,\n        [name]: {\n          value,\n          error\n        }\n      });\n    }\n  };\n\n  const handleSubmit = e => {\n    var _state$email, _state$name;\n\n    const emailE = checkForUndefined(\"email\", (_state$email = state.email) === null || _state$email === void 0 ? void 0 : _state$email.value);\n    const nameE = checkForUndefined(\"name\", (_state$name = state.name) === null || _state$name === void 0 ? void 0 : _state$name.value);\n    const messageE = checkForUndefined(\"message\", state.message.value); // const emailError = validateRequired(\"email\", state.email?.value);\n    // const nameError = validateRequired(\"name\", state.name?.value);\n    // const messageError = validateRequired(\"message\", state.message?.value);\n    //   if (state.email.value === undefined) {\n    //     setState({\n    //       ...state,\n    //       email: { value: state.email.value, error: emailError },\n    //     });\n    //   }\n    //   if (nameError || state.name.value === undefined) {\n    //     setState({\n    //       ...state,\n    //       name: { value: state.name.value, error: nameError },\n    //     });\n    //   }\n    //   if (messageError || state.message.value === undefined) {\n    //     setState({\n    //       ...state,\n    //       message: { value: state.message.value, error: messageError },\n    //     });\n    //   }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        name: \"name\",\n        onChange: handleChange,\n        id: \"form-input-control-error-name\",\n        label: \"Name\",\n        placeholder: \"Joe Schmoe\",\n        control: Input,\n        error: (_state$name2 = state.name) === null || _state$name2 === void 0 ? void 0 : _state$name2.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        name: \"email\",\n        onChange: handleChange,\n        id: \"form-input-control-error-email\",\n        control: Input,\n        label: \"Email\",\n        placeholder: \"joe@schmoe.com\",\n        error: (_state$email2 = state.email) === null || _state$email2 === void 0 ? void 0 : _state$email2.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        name: \"message\",\n        onChange: handleChange,\n        id: \"form-input-control-error-message\",\n        label: \"Message\",\n        control: Input,\n        error: (_state$message = state.message) === null || _state$message === void 0 ? void 0 : _state$message.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactForm, \"wc4FVGFDk/CrMM/4WhalkcDyeN4=\");\n\n_c = ContactForm;\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/donitabella/Desktop/UC BERKELEY/Challenges/React Portfolio/src/components/ContactForm.js"],"names":["React","useState","Button","Form","Input","Container","validator","isEmail","checkForUndefined","name","value","undefined","setState","state","error","validateRequired","toString","trim","length","content","validateEmail","valido","validateLength","ContactForm","handleChange","e","handleSubmit","emailE","email","nameE","messageE","message"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form, Input, Container } from \"semantic-ui-react\";\nimport validator from \"validator\";\nimport isEmail from \"validator/lib/isEmail\";\n\nconst checkForUndefined = (name, value) => {\n  if (value === undefined) {\n    setState({\n      ...state,\n      [name]: { value, error: \"You can't leave blank fields\" },\n    });\n  }\n};\n\nconst validateRequired = (name, value) => {\n  if (!value.toString().trim().length) {\n    return {\n      content: `Please enter a ${name}`,\n    };\n  }\n};\n\nconst validateEmail = (value) => {\n  const valido = validator.isEmail(value);\n  if (!valido) {\n    return {\n      content: `Please enter a valid email`,\n    };\n  }\n};\n\nconst validateLength = (value) => {\n  if (value.toString().trim().length < 12) {\n    return {\n      content: \"Please enter a message of at least 12 characters\",\n    };\n  }\n};\n\nconst ContactForm = () => {\n  const [state, setState] = useState({});\n  const handleChange = (e, { name, value }) => {\n    var error;\n    if (name === \"email\") {\n      error = validateEmail(value);\n\n      setState({ ...state, [name]: { value, error } });\n    }\n    if (name === \"message\") {\n      error = validateLength(value);\n      setState({ ...state, [name]: { value, error } });\n    }\n    error = validateRequired(name, value);\n    if (error) {\n      setState({ ...state, [name]: { value, error } });\n    }\n  };\n  const handleSubmit = (e) => {\n    const emailE = checkForUndefined(\"email\", state.email?.value);\n    const nameE = checkForUndefined(\"name\", state.name?.value);\n    const messageE = checkForUndefined(\"message\", state.message.value);\n    // const emailError = validateRequired(\"email\", state.email?.value);\n    // const nameError = validateRequired(\"name\", state.name?.value);\n    // const messageError = validateRequired(\"message\", state.message?.value);\n    //   if (state.email.value === undefined) {\n    //     setState({\n    //       ...state,\n    //       email: { value: state.email.value, error: emailError },\n    //     });\n    //   }\n    //   if (nameError || state.name.value === undefined) {\n    //     setState({\n    //       ...state,\n    //       name: { value: state.name.value, error: nameError },\n    //     });\n    //   }\n    //   if (messageError || state.message.value === undefined) {\n    //     setState({\n    //       ...state,\n    //       message: { value: state.message.value, error: messageError },\n    //     });\n    //   }\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Form.Field\n          name=\"name\"\n          onChange={handleChange}\n          id=\"form-input-control-error-name\"\n          label=\"Name\"\n          placeholder=\"Joe Schmoe\"\n          control={Input}\n          error={state.name?.error}\n        ></Form.Field>\n        <Form.Field\n          name=\"email\"\n          onChange={handleChange}\n          id=\"form-input-control-error-email\"\n          control={Input}\n          label=\"Email\"\n          placeholder=\"joe@schmoe.com\"\n          error={state.email?.error}\n        ></Form.Field>\n        <Form.Field\n          name=\"message\"\n          onChange={handleChange}\n          id=\"form-input-control-error-message\"\n          label=\"Message\"\n          control={Input}\n          error={state.message?.error}\n        ></Form.Field>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}